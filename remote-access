#!/bin/bash
# Gives me remote access to an Ubuntu/Debian machine.

set -euo pipefail

echo
echo "Installing SSH server and upnpc..."
echo "(This may ask you for your password)"
echo


if ! which upnpc >&/dev/null || ! pgrep sshd; then
  sudo apt-get update
fi

if ! which upnpc >&/dev/null; then
  sudo apt-get install -y miniupnpc
fi

# Do we have sshd running already? If so, we can use that; otherwise we need
# to install it.
pgrep sshd || sudo apt-get install -y openssh-server


# Now configure SSH server securely. This is a bit delicate because the user
# may already have SSH set up the way they like. I'm being a bit inconsiderate
# by reconfiguring their SSH if this is the case, but it's the right choice
# for security and I'll tag the new SSH entries with comments so they're easy
# to delete.
if ! sudo egrep -q '^PasswordAuthentication no' /etc/ssh/sshd_config; then
  echo
  echo "Configuring SSH server; appending this to your /etc/ssh/sshd_config:"
  echo
  sudo tee -a /etc/ssh/sshd_config <<'EOF'
# ===================================
# REMOTE ACCESS SETTINGS FOR SECURITY
PubkeyAuthentication yes
PasswordAuthentication no
# (You can delete these to restore your SSH server to its normal state, which
#  will re-enable password logins; this is less secure but more accessible if
#  you haven't set up SSH keys. If you don't know what any of this means,
#  then you should leave these settings enabled.)
# END OF REMOTE SETTINGS
# ======================
EOF
  # Important: force new settings to be applied
  sudo service sshd restart
  echo
  echo "New settings are now applied"
  echo
fi


# SSH server is now working, so let's allocate a forwarded port. It doesn't
# matter which port number we use as long as it doesn't collide with anything
# else; 30022 should be fine.
echo
echo "Detected this IP configuration:"
gateway_ip=$(ip route get 8.8.8.8 | egrep -o 'via (\S+)' | awk '{print $2}')
echo "  gateway IP = $gateway_ip"
our_ip=$(ip route get "$gateway_ip" | egrep -o 'src (\S+)' | awk '{print $2}')
echo "  machine local IP = $our_ip"
echo

port=30022
until upnpc -a "$our_ip" 22 "$port" TCP; do
  echo "Forwarding WAN port $port failed; trying one higher..."
  port=$((port + 1))
  if (( port > 30200 )); then
    echo "WAN port forwarding failed within the range [30022-30200]."
    echo "uPnP may not be working correctly."
    exit 1
  fi
done

echo "Forwarded WAN port $port to $our_ip:22"


# Final steps: add my SSH key and ping the web endpoint to minimize the amount
# of mistyping that happens around the IP and username.
echo
echo "Enabling SSH key for spencertipping..."

mkdir -p ~/.ssh
if ! grep -q spencertipping ~/.ssh/authorized_keys; then
  wget -qO- https://spencertipping.com/id_rsa.pub >> ~/.ssh/authorized_keys
fi

wget -qO- https://spencertipping.com/cgi-bin/remote-ping?$port:$USER || :

echo
echo
echo
echo "SUCCESS"
echo "======="
echo
echo "Remote access should now be enabled. Your machine is secure and"
echo "you don't need to do anything else."
echo
echo "OPTIONAL STEPS TO DISABLE REMOTE ACCESS"
echo "======================================="
echo
echo "You can disable all remote access by running this command:"
echo "  upnpc -d $port TCP"
echo
echo "To revoke my SSH access specifically, you can run this:"
echo "  sed -i.orig /spencertipping/d ~/.ssh/authorized_keys"
echo
echo "Finally, you can run 'sudo gedit /etc/ssh/sshd_config' and delete"
echo "the block of remote configuration options if you want to restore"
echo "password SSH logins. Before you do this, use an online port scanner"
echo "like https://www.whatismyip.com/port-scanner/ to verify that your"
echo "port $port is closed."
echo
